package vterm

// Generated by generator.rb

import (
	"github.com/perpen/vtx00/vparser"
	"testing"
)

var AllControls = map[string]vparser.ControlSpec{
	"BEL": {
		Name:           "BEL",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o7
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{7},
			},
		},
		UserData: doBEL,
	},
	"BS": {
		Name:           "BS",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o10
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{8},
			},
		},
		UserData: doBS,
	},
	"CR": {
		Name:           "CR",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o15
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{13},
			},
		},
		UserData: doCR,
	},
	"ENQ": {
		Name:           "ENQ",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o5
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{5},
			},
		},
		UserData: nil,
	},
	"FF": {
		Name:           "FF",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o14
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{12},
			},
		},
		UserData: nil,
	},
	"LF": {
		Name:           "LF",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o12
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{10},
			},
		},
		UserData: doLF,
	},
	"SI": {
		Name:           "SI",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o17
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{15},
			},
		},
		UserData: nil,
	},
	"SO": {
		Name:           "SO",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o16
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{14},
			},
		},
		UserData: nil,
	},
	"SP": {
		Name:           "SP",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o40
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{32},
			},
		},
		UserData: nil,
	},
	"TAB": {
		Name:           "TAB",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o0
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{0},
			},
		},
		UserData: nil,
	},
	"VT": {
		Name:           "VT",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o13
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{11},
			},
		},
		UserData: nil,
	},
	"ICH": {
		Name:           "ICH",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI @
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{64},
			},
		},
		UserData: nil,
	},
	"CUU": {
		Name:           "CUU",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI A
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{65},
			},
		},
		UserData: doCUU,
	},
	"CUD": {
		Name:           "CUD",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI B
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{66},
			},
			// ESC B
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{66},
			},
		},
		UserData: doCUD,
	},
	"CUF": {
		Name:           "CUF",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI C
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{67},
			},
		},
		UserData: doCUF,
	},
	"CUB": {
		Name:           "CUB",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI D
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{68},
			},
		},
		UserData: doCUB,
	},
	"CNL": {
		Name:           "CNL",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI E
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{69},
			},
		},
		UserData: nil,
	},
	"CPL": {
		Name:           "CPL",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI F
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{70},
			},
		},
		UserData: nil,
	},
	"CHA": {
		Name:           "CHA",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI G
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{71},
			},
		},
		UserData: doCHA,
	},
	"CUP": {
		Name:           "CUP",
		ParamsNumber:   2,
		ParamsDefaults: []int{1, 1},
		Triggers: []vparser.Trigger{
			// CSI H
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{72},
			},
		},
		UserData: doCUP,
	},
	"CHT": {
		Name:           "CHT",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI I
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{73},
			},
		},
		UserData: nil,
	},
	"ED": {
		Name:           "ED",
		ParamsNumber:   1,
		ParamsDefaults: []int{0},
		Triggers: []vparser.Trigger{
			// CSI J
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{74},
			},
		},
		Selections: map[int]string{
			0: "Erase Below (default)",
			1: "Erase Above",
			2: "Erase All",
			3: "Erase Saved Lines (xterm)",
		},
		UserData: doED,
	},
	"DECSED": {
		Name:           "DECSED",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI ? J
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{63, 74},
			},
		},
		UserData: nil,
	},
	"EL": {
		Name:           "EL",
		ParamsNumber:   1,
		ParamsDefaults: []int{0},
		Triggers: []vparser.Trigger{
			// CSI K
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{75},
			},
		},
		Selections: map[int]string{
			0: "Erase to Right (default)",
			1: "Erase to Left",
			2: "Erase All",
		},
		UserData: doEL,
	},
	"DECSEL": {
		Name:           "DECSEL",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI ? K
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{63, 75},
			},
		},
		UserData: nil,
	},
	"IL": {
		Name:           "IL",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI L
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{76},
			},
		},
		UserData: doIL,
	},
	"DL": {
		Name:           "DL",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI M
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{77},
			},
		},
		UserData: doDL,
	},
	"DCH": {
		Name:           "DCH",
		ParamsNumber:   1,
		ParamsDefaults: []int{1},
		Triggers: []vparser.Trigger{
			// CSI P
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{80},
			},
		},
		UserData: nil,
	},
	"SU": {
		Name:           "SU",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI S
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{83},
			},
		},
		UserData: nil,
	},
	"SD": {
		Name:           "SD",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI T
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{84},
			},
		},
		UserData: nil,
	},
	"XMT": {
		Name:           "XMT",
		ParamsNumber:   5,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI T
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{84},
			},
		},
		UserData: nil,
	},
	"XTITLE": {
		Name:           "XTITLE",
		ParamsNumber:   2,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI > T
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{62, 84},
			},
		},
		UserData: nil,
	},
	"ECH": {
		Name:           "ECH",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI X
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{88},
			},
		},
		UserData: nil,
	},
	"CBT": {
		Name:           "CBT",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI Z
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{90},
			},
		},
		UserData: nil,
	},
	"HPA": {
		Name:           "HPA",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI `
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{96},
			},
		},
		UserData: nil,
	},
	"HPR": {
		Name:           "HPR",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI a
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{97},
			},
		},
		UserData: nil,
	},
	"REP": {
		Name:           "REP",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI b
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{98},
			},
		},
		UserData: nil,
	},
	"DA1": {
		Name:           "DA1",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI c
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{99},
			},
		},
		UserData: nil,
	},
	"DA2": {
		Name:           "DA2",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI > c
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{62, 99},
			},
		},
		UserData: nil,
	},
	"VPA": {
		Name:           "VPA",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI d
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{100},
			},
		},
		UserData: nil,
	},
	"VPR": {
		Name:           "VPR",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI e
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{101},
			},
		},
		UserData: nil,
	},
	"HVP": {
		Name:           "HVP",
		ParamsNumber:   2,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI f
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{102},
			},
		},
		UserData: nil,
	},
	"TBC": {
		Name:           "TBC",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI g
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{103},
			},
		},
		UserData: nil,
	},
	"SM": {
		Name:           "SM",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI h
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{104},
			},
		},
		Selections: map[int]string{
			2: "Keyboard Action Mode (AM)",
			4: "Insert Mode (IRM)",
			12: "Send/receive (SRM)",
			20: "Automatic Newline (LNM)",
		},
		UserData: doSM,
	},
	"DECSET": {
		Name:           "DECSET",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI ? h
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{63, 104},
			},
		},
		Selections: map[int]string{
			1: "Application Cursor Keys (DECCKM)",
			2: "Designate USASCII for character sets G0-G3 (DECANM), and set VT100 mode",
			3: "132 Column Mode (DECCOLM)",
			4: "Smooth (Slow) Scroll (DECSCLM)",
			5: "Reverse Video (DECSCNM)",
			6: "Origin Mode (DECOM)",
			7: "Wraparound Mode (DECAWM)",
			8: "Auto-repeat Keys (DECARM)",
			9: "Send Mouse X & Y on button press.  See the section Mouse Tracking.  This is the X10 xterm mouse protocol",
			10: "Show toolbar (rxvt)",
			12: "Start Blinking Cursor (AT&T 610)",
			13: "Start Blinking Cursor (set only via resource or menu)",
			14: "Enable XOR of Blinking Cursor control sequence and menu",
			18: "Print form feed (DECPFF)",
			19: "Set print extent to full screen (DECPEX)",
			25: "Show Cursor (DECTCEM)",
			30: "Show scrollbar (rxvt)",
			35: "Enable font-shifting functions (rxvt)",
			38: "Enter Tektronix Mode (DECTEK)",
			40: "Allow 80 -> 132 Mode",
			41: "more(1) fix (see curses(3) resource)",
			42: "Enable National Replacement Character sets (DECNRCM)",
			44: "Turn On Margin Bell",
			45: "Reverse-wraparound Mode",
			46: "Start Logging.  This is normally disabled by a compile-time option",
			47: "Use Alternate Screen Buffer.  (This may be disabled by the titeInhibit resource)",
			66: "Application keypad (DECNKM)",
			67: "Backarrow key sends backspace (DECBKM)",
			69: "Enable left and right margin mode (DECLRMM), VT420 and up",
			95: "Do not clear screen when DECCOLM is set/reset (DECNCSM), VT510 and up",
			1000: "Send Mouse X & Y on button press and release.  See the section Mouse Tracking.  This is the X11 xterm mouse protocol",
			1001: "Use Hilite Mouse Tracking",
			1002: "Use Cell Motion Mouse Tracking",
			1003: "Use All Motion Mouse Tracking",
			1004: "Send FocusIn/FocusOut events",
			1005: "Enable UTF-8 Mouse Mode",
			1006: "Enable SGR Mouse Mode",
			1007: "Enable Alternate Scroll Mode, i.e., the alternateScroll resource",
			1010: "Scroll to bottom on tty output (rxvt)",
			1011: "Scroll to bottom on key press (rxvt)",
			1015: "Enable urxvt Mouse Mode",
			1034: "Interpret \"meta\" key, sets eighth bit. (enables the eightBitInput resource)",
			1035: "Enable special modifiers for Alt and NumLock keys.  (This enables the numLock resource)",
			1036: "Send ESC   when Meta modifies a key.  (This enables the metaSendsEscape resource)",
			1037: "Send DEL from the editing-keypad Delete key",
			1039: "Send ESC  when Alt modifies a key.  (This enables the altSendsEscape resource)",
			1040: "Keep selection even if not highlighted. (This enables the keepSelection resource)",
			1041: "Use the CLIPBOARD selection.  (This enables the selectToClipboard resource)",
			1042: "Enable Urgency window manager hint when Control-G is received.  (This enables the bellIsUrgent resource)",
			1043: "Enable raising of the window when Control-G is received.  (enables the popOnBell resource)",
			1044: "Reuse the most recent data copied to CLIPBOARD.  (This enables the keepClipboard resource)",
			1046: "Enable switching to/from Alternate Screen Buffer.  This works for terminfo-based systems, updating the titeInhibit resource",
			1047: "Use Alternate Screen Buffer.  (This may be disabled by the titeInhibit resource)",
			1048: "Save cursor as in DECSC.  (This may be disabled by the titeInhibit resource)",
			1049: "Save cursor as in DECSC and use Alternate Screen Buffer, clearing it first.  (This may be disabled by the titeInhibit resource).  This combines the effects of the 1 0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based applications rather than the 4 7  mode",
			1050: "Set terminfo/termcap function-key mode",
			1051: "Set Sun function-key mode",
			1052: "Set HP function-key mode",
			1053: "Set SCO function-key mode",
			1060: "Set legacy keyboard emulation (i.e, X11R6)",
			1061: "Set VT220 keyboard emulation",
			2004: "Set bracketed paste mode",
		},
		UserData: doDECSET,
	},
	"MC": {
		Name:           "MC",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI i
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{105},
			},
		},
		UserData: nil,
	},
	"XMC_DEC": {
		Name:           "XMC_DEC",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI ? i
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{63, 105},
			},
		},
		UserData: nil,
	},
	"RM": {
		Name:           "RM",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI l
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{108},
			},
		},
		Selections: map[int]string{
			2: "Keyboard Action Mode (AM)",
			4: "Replace Mode (IRM)",
			12: "Send/receive (SRM)",
			20: "Normal Linefeed (LNM)",
		},
		UserData: doRM,
	},
	"DECRST": {
		Name:           "DECRST",
		ParamsNumber:   -1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI ? l
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{63, 108},
			},
		},
		Selections: map[int]string{
			1: "Normal Cursor Keys (DECCKM)",
			2: "Designate VT52 mode (DECANM)",
			3: "80 Column Mode (DECCOLM)",
			4: "Jump (Fast) Scroll (DECSCLM)",
			5: "Normal Video (DECSCNM)",
			6: "Normal Cursor Mode (DECOM)",
			7: "No Wraparound Mode (DECAWM)",
			8: "No Auto-repeat Keys (DECARM)",
			9: "Don't send Mouse X & Y on button press",
			10: "Hide toolbar (rxvt)",
			12: "Stop Blinking Cursor (AT&T 610)",
			13: "Disable Blinking Cursor (reset only via resource or menu)",
			14: "Disable XOR of Blinking Cursor control sequence and menu",
			18: "Don't print form feed (DECPFF)",
			19: "Limit print to scrolling region (DECPEX)",
			25: "Hide Cursor (DECTCEM)",
			30: "Don't show scrollbar (rxvt)",
			35: "Disable font-shifting functions (rxvt)",
			40: "Disallow 80 -> 132 Mode",
			41: "No more(1) fix (see curses(3) resource)",
			42: "Disable National Replacement Character sets (DECNRCM)",
			44: "Turn Off Margin Bell",
			45: "No Reverse-wraparound Mode",
			46: "Stop Logging.  (This is normally disabled by a compile-time option)",
			47: "Use Normal Screen Buffer",
			66: "Numeric keypad (DECNKM)",
			67: "Backarrow key sends delete (DECBKM)",
			69: "Disable left and right margin mode (DECLRMM), VT420 and up",
			95: "Clear screen when DECCOLM is set/reset (DEC- NCSM), VT510 and up",
			1000: "Don't send Mouse X & Y on button press and release.  See the section Mouse Tracking",
			1001: "Don't use Hilite Mouse Tracking",
			1002: "Don't use Cell Motion Mouse Tracking",
			1003: "Don't use All Motion Mouse Tracking",
			1004: "Don't send FocusIn/FocusOut events",
			1005: "Disable UTF-8 Mouse Mode",
			1006: "Disable SGR Mouse Mode",
			1007: "Disable Alternate Scroll Mode, i.e., the alternateScroll resource",
			1010: "Don't scroll to bottom on tty output (rxvt)",
			1011: "Don't scroll to bottom on key press (rxvt)",
			1015: "Disable urxvt Mouse Mode",
			1034: "Don't interpret \"meta\" key.  (This disables the eightBitInput resource)",
			1035: "Disable special modifiers for Alt and Num- Lock keys.  (This disables the numLock resource)",
			1036: "Don't send ESC  when Meta modifies a key. (This disables the metaSendsEscape resource)",
			1037: "Send VT220 Remove from the editing-keypad Delete key",
			1039: "Don't send ESC  when Alt modifies a key. (This disables the altSendsEscape resource)",
			1040: "Do not keep selection when not highlighted. (This disables the keepSelection resource)",
			1041: "Use the PRIMARY selection.  (This disables the selectToClipboard resource)",
			1042: "Disable Urgency window manager hint when Control-G is received.  (This disables the bellIsUrgent resource)",
			1043: "Disable raising of the window when Control- G is received.  (This disables the popOnBell resource)",
			1046: "Disable switching to/from Alternate Screen Buffer.  This works for terminfo-based systems, updating the titeInhibit resource.  If currently using the Alternate Screen Buffer, xterm switches to the Normal Screen Buffer",
			1047: "Use Normal Screen Buffer, clearing screen first if in the Alternate Screen Buffer.  (This may be dis- abled by the titeInhibit resource)",
			1048: "Restore cursor as in DECRC.  (This may be disabled by the titeInhibit resource)",
			1049: "Use Normal Screen Buffer and restore cursor as in DECRC.  (This may be disabled by the titeInhibit resource).  This combines the effects of the 1 0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based applications rather than the 4 7  mode",
			1050: "Reset terminfo/termcap function-key mode",
			1051: "Reset Sun function-key mode",
			1052: "Reset HP function-key mode",
			1053: "Reset SCO function-key mode",
			1060: "Reset legacy keyboard emulation (i.e, X11R6)",
			1061: "Reset keyboard emulation to Sun/PC style",
			2004: "Reset bracketed paste mode",
		},
		UserData: doDECRST,
	},
	"SGR": {
		Name:           "SGR",
		ParamsNumber:   -1,
		ParamsDefaults: []int{0},
		Triggers: []vparser.Trigger{
			// CSI m
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{109},
			},
		},
		Selections: map[int]string{
			0: "Normal (default)",
			1: "Bold",
			2: "Faint, decreased intensity (ISO 6429)",
			3: "Italicized (ISO 6429)",
			4: "Underlined",
			5: "Blink (appears as Bold in X11R6 xterm)",
			7: "Inverse",
			8: "Invisible, i.e., hidden (VT300)",
			9: "Crossed-out characters (ISO 6429)",
			21: "Doubly-underlined (ISO 6429)",
			22: "Normal (neither bold nor faint)",
			23: "Not italicized (ISO 6429)",
			24: "Not underlined",
			25: "Steady (not blinking)",
			27: "Positive (not inverse)",
			28: "Visible, i.e., not hidden (VT300)",
			29: "Not crossed-out (ISO 6429)",
			30: "Set foreground color to Black",
			31: "Set foreground color to Red",
			32: "Set foreground color to Green",
			33: "Set foreground color to Yellow",
			34: "Set foreground color to Blue",
			35: "Set foreground color to Magenta",
			36: "Set foreground color to Cyan",
			37: "Set foreground color to White",
			39: "Set foreground color to default (original)",
			40: "Set background color to Black",
			41: "Set background color to Red",
			42: "Set background color to Green",
			43: "Set background color to Yellow",
			44: "Set background color to Blue",
			45: "Set background color to Magenta",
			46: "Set background color to Cyan",
			47: "Set background color to White",
			49: "Set background color to default (original)",
			90: "Set foreground color to Black",
			91: "Set foreground color to Red",
			92: "Set foreground color to Green",
			93: "Set foreground color to Yellow",
			94: "Set foreground color to Blue",
			95: "Set foreground color to Magenta",
			96: "Set foreground color to Cyan",
			97: "Set foreground color to White",
			100: "Set background color to Black",
			101: "Set background color to Red",
			102: "Set background color to Green",
			103: "Set background color to Yellow",
			104: "Set background color to Blue",
			105: "Set background color to Magenta",
			106: "Set background color to Cyan",
			107: "Set background color to White",
		},
		UserData: doSGR,
	},
	"XXTERM_RESOURCES": {
		Name:           "XXTERM_RESOURCES",
		ParamsNumber:   2,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI > m
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{62, 109},
			},
		},
		UserData: nil,
	},
	"DSR": {
		Name:           "DSR",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI n
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{110},
			},
		},
		Selections: map[int]string{
			5: "Status Report",
			6: "Report Cursor Position (CPR) [row;column]",
		},
		UserData: nil,
	},
	"XXTERM_MODIFIERS": {
		Name:           "XXTERM_MODIFIERS",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI > n
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{62, 110},
			},
		},
		UserData: nil,
	},
	"DSR_DEC": {
		Name:           "DSR_DEC",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI ? n
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{63, 110},
			},
		},
		UserData: nil,
	},
	"XXTERM_POINTER": {
		Name:           "XXTERM_POINTER",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI > p
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{62, 112},
			},
		},
		UserData: nil,
	},
	"DECSTR": {
		Name:           "DECSTR",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI ! p
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{33, 112},
			},
		},
		UserData: nil,
	},
	"DECSCL": {
		Name:           "DECSCL",
		ParamsNumber:   2,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI "
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{34},
			},
		},
		UserData: nil,
	},
	"XDECRQM_ANSI": {
		Name:           "XDECRQM_ANSI",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI p
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{112},
			},
		},
		UserData: nil,
	},
	"XDECRQM_PRIVATE": {
		Name:           "XDECRQM_PRIVATE",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI ? P
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{63, 80},
			},
		},
		UserData: nil,
	},
	"DECLL": {
		Name:           "DECLL",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI q
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{113},
			},
		},
		UserData: nil,
	},
	"DECSCUSR": {
		Name:           "DECSCUSR",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI S
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{83},
			},
		},
		UserData: nil,
	},
	"DECSCA": {
		Name:           "DECSCA",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI "
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{34},
			},
		},
		UserData: nil,
	},
	"DECSTBM": {
		Name:           "DECSTBM",
		ParamsNumber:   -1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI r
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{114},
			},
		},
		UserData: doDECSTBM,
	},
	"XDECRESTPRIV": {
		Name:           "XDECRESTPRIV",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI ? r
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{63, 114},
			},
		},
		UserData: nil,
	},
	"DECCARA": {
		Name:           "DECCARA",
		ParamsNumber:   4,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI P
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{80},
			},
		},
		UserData: nil,
	},
	"XCURSAV": {
		Name:           "XCURSAV",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI s
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{115},
			},
		},
		UserData: nil,
	},
	"DECSLRM": {
		Name:           "DECSLRM",
		ParamsNumber:   2,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI s
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{115},
			},
		},
		UserData: nil,
	},
	"XDECPRIV": {
		Name:           "XDECPRIV",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI ? s
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{63, 115},
			},
		},
		UserData: nil,
	},
	"XDTTERM": {
		Name:           "XDTTERM",
		ParamsNumber:   3,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI t
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{116},
			},
		},
		UserData: nil,
	},
	"XXTERM_TITLE2": {
		Name:           "XXTERM_TITLE2",
		ParamsNumber:   2,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI > t
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{62, 116},
			},
		},
		UserData: nil,
	},
	"DECSWBV": {
		Name:           "DECSWBV",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI S
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{83},
			},
		},
		UserData: nil,
	},
	"DECRARA": {
		Name:           "DECRARA",
		ParamsNumber:   4,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI P
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{80},
			},
		},
		UserData: nil,
	},
	"SCORC": {
		Name:           "SCORC",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI u
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{117},
			},
		},
		UserData: nil,
	},
	"DECSMBV": {
		Name:           "DECSMBV",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI S
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{83},
			},
		},
		UserData: nil,
	},
	"DECCRA": {
		Name:           "DECCRA",
		ParamsNumber:   7,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI P
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{80},
			},
		},
		UserData: nil,
	},
	"DECEFR": {
		Name:           "DECEFR",
		ParamsNumber:   4,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI '
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{39},
			},
		},
		UserData: nil,
	},
	"DECREQTPARM": {
		Name:           "DECREQTPARM",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI x
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{120},
			},
		},
		UserData: nil,
	},
	"DECSACE": {
		Name:           "DECSACE",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI *
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{42},
			},
		},
		UserData: nil,
	},
	"DECFRA": {
		Name:           "DECFRA",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI P
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{80},
			},
		},
		UserData: nil,
	},
	"DECRQCRA": {
		Name:           "DECRQCRA",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI P
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{80},
			},
		},
		UserData: nil,
	},
	"DECELR": {
		Name:           "DECELR",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI P
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{80},
			},
		},
		UserData: nil,
	},
	"DECERA": {
		Name:           "DECERA",
		ParamsNumber:   3,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI P
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{80},
			},
		},
		UserData: nil,
	},
	"DECSLE": {
		Name:           "DECSLE",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI '
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{39},
			},
		},
		UserData: nil,
	},
	"DECSERA": {
		Name:           "DECSERA",
		ParamsNumber:   4,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI {
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{123},
			},
		},
		UserData: nil,
	},
	"DECRQLP": {
		Name:           "DECRQLP",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI '
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{39},
			},
		},
		UserData: nil,
	},
	"DECIC": {
		Name:           "DECIC",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI '
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{39},
			},
		},
		UserData: nil,
	},
	"DECDC": {
		Name:           "DECDC",
		ParamsNumber:   1,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// CSI '
			vparser.Trigger{
				Set:      vparser.SetCSI,
				Sequence: []byte{39},
			},
		},
		UserData: nil,
	},
	"S7C1T": {
		Name:           "S7C1T",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC S F
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{83, 70},
			},
		},
		UserData: nil,
	},
	"S8C1T": {
		Name:           "S8C1T",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC S G
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{83, 71},
			},
		},
		UserData: nil,
	},
	"XANSI1": {
		Name:           "XANSI1",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC S L
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{83, 76},
			},
		},
		UserData: nil,
	},
	"XANSI2": {
		Name:           "XANSI2",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC S M
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{83, 77},
			},
		},
		UserData: nil,
	},
	"XANSI3": {
		Name:           "XANSI3",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC S N
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{83, 78},
			},
		},
		UserData: nil,
	},
	"XDECDHL3": {
		Name:           "XDECDHL3",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC # 3
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{35, 51},
			},
		},
		UserData: nil,
	},
	"XDECDHL4": {
		Name:           "XDECDHL4",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC # 4
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{35, 52},
			},
		},
		UserData: nil,
	},
	"DECSWL": {
		Name:           "DECSWL",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC # 5
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{35, 53},
			},
		},
		UserData: nil,
	},
	"DECDWL": {
		Name:           "DECDWL",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC # 6
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{35, 54},
			},
		},
		UserData: nil,
	},
	"DECALN": {
		Name:           "DECALN",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC # 8
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{35, 56},
			},
		},
		UserData: nil,
	},
	"XDEFCS": {
		Name:           "XDEFCS",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC % @
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{37, 64},
			},
		},
		UserData: nil,
	},
	"XUTFCS": {
		Name:           "XUTFCS",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC % G
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{37, 71},
			},
		},
		UserData: nil,
	},
	"XDESG0": {
		Name:           "XDESG0",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC ( C
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{40, 67},
			},
		},
		UserData: nil,
	},
	"XDESG1": {
		Name:           "XDESG1",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC )
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{41},
			},
		},
		UserData: doXDESG1,
	},
	"XDESG2": {
		Name:           "XDESG2",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC *
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{42},
			},
		},
		UserData: nil,
	},
	"XDESG3": {
		Name:           "XDESG3",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC +
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{43},
			},
		},
		UserData: nil,
	},
	"XDESG1B": {
		Name:           "XDESG1B",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC -
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{45},
			},
		},
		UserData: nil,
	},
	"XDESG2B": {
		Name:           "XDESG2B",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC .
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{46},
			},
		},
		UserData: nil,
	},
	"XDESG3B": {
		Name:           "XDESG3B",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC /
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{47},
			},
		},
		UserData: nil,
	},
	"DECBI": {
		Name:           "DECBI",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC 6
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{54},
			},
		},
		UserData: nil,
	},
	"DECSC": {
		Name:           "DECSC",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC 7
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{55},
			},
		},
		UserData: nil,
	},
	"DECRC": {
		Name:           "DECRC",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC 8
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{56},
			},
		},
		UserData: nil,
	},
	"DECFI": {
		Name:           "DECFI",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC 9
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{57},
			},
		},
		UserData: nil,
	},
	"DECKPAM": {
		Name:           "DECKPAM",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC =
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{61},
			},
		},
		UserData: nil,
	},
	"DECKPNM": {
		Name:           "DECKPNM",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC >
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{62},
			},
		},
		UserData: doDECKPNM,
	},
	"XCLL": {
		Name:           "XCLL",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC F
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{70},
			},
		},
		UserData: nil,
	},
	"RIS": {
		Name:           "RIS",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC c
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{99},
			},
		},
		UserData: nil,
	},
	"XMEMLCK": {
		Name:           "XMEMLCK",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC l
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{108},
			},
		},
		UserData: nil,
	},
	"XMEMULCK": {
		Name:           "XMEMULCK",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC m
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{109},
			},
		},
		UserData: nil,
	},
	"LS2": {
		Name:           "LS2",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC n
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{110},
			},
		},
		UserData: nil,
	},
	"LS3": {
		Name:           "LS3",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC o
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{111},
			},
		},
		UserData: nil,
	},
	"LS3R": {
		Name:           "LS3R",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC |
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{124},
			},
		},
		UserData: nil,
	},
	"LS2R": {
		Name:           "LS2R",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC }
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{125},
			},
		},
		UserData: nil,
	},
	"LS1R": {
		Name:           "LS1R",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// ESC ~
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{126},
			},
		},
		UserData: nil,
	},
	"RI": {
		Name:           "RI",
		ParamsNumber:   0,
		ParamsDefaults: []int{},
		Triggers: []vparser.Trigger{
			// Ctrl 0o215
			vparser.Trigger{
				Set:      vparser.SetC01,
				Sequence: []byte{141},
			},
			// ESC M
			vparser.Trigger{
				Set:      vparser.SetESC,
				Sequence: []byte{77},
			},
		},
		UserData: doRI,
	},
}

var allControlTests = map[string]func(*testing.T){
	"BEL": testBEL,
	"BS": testBS,
	"CR": testCR,
	"LF": testLF,
	"CUU": testCUU,
	"CUD": testCUD,
	"CUF": testCUF,
	"CUB": testCUB,
	"CHA": testCHA,
	"CUP": testCUP,
	"ED": testED,
	"EL": testEL,
	"IL": testIL,
	"DL": testDL,
	"SM": testSM,
	"DECSET": testDECSET,
	"RM": testRM,
	"DECRST": testDECRST,
	"SGR": testSGR,
	"DECSTBM": testDECSTBM,
	"XDESG1": testXDESG1,
	"DECKPNM": testDECKPNM,
	"RI": testRI,
}
