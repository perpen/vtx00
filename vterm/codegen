#!/usr/bin/env ruby
# frozen_string_literal: false

Dir.chdir File.dirname(__FILE__)

require 'pp'
require 'yaml'
require 'open-uri'
require 'nokogiri'
require 'cgi'

def generate_controls(output_dir, model_yamls)
  functions = {}
  model_yamls.each do |model|
    functions.merge!(YAML.load_file(model))
  end

  # functions = functions.slice("BEL")

  marker = '// edits above this line will be lost if code is generated again'
  specs_path = "#{output_dir}/controls.go"
  puts "generating #{specs_path}"

  File.open(specs_path, 'w') do |specs_f|
    specs_f.puts 'package vterm'
    specs_f.puts ''
    specs_f.puts '// Generated by generator.rb'
    specs_f.puts ''
    specs_f.puts 'import ('
    specs_f.puts "\t\"github.com/perpen/vtx00/vparser\""
    specs_f.puts "\t\"testing\""
    specs_f.puts ')'
    specs_f.puts ''
    specs_f.puts 'var AllControls = map[string]vparser.ControlSpec{'

    functions.each do |name, details|
      name = name.gsub('-', '_')

      go_summary = details[:summary].sub('`', '\`')
      go_description = details[:description].sub('`', '\`')
      params_defaults = details[:params_defaults]
      go_params_defaults = if params_defaults
                             "[]int{#{params_defaults.join ', '}}"
                           else
                             'nil'
                           end

      specs_f.puts "\t\"#{name}\": {"
      specs_f.puts "\t\t\Name:           \"#{name}\","
      specs_f.puts "\t\t\ParamsNumber:   #{details[:params_num]},"
      specs_f.puts "\t\t\ParamsDefaults: #{go_params_defaults},"
      specs_f.puts "\t\t\Triggers: []vparser.Trigger{"

      details[:representations].each do |rep|
        # puts rep
        human_set = rep[:control_set]
        case rep[:control_set]
        when 'C'
          go_set = 'SetC01'
          human_set = 'Ctrl'
        when 'ESC'
          go_set = 'SetESC'
        when 'CSI'
          go_set = 'SetCSI'
        else
          raise "BUG - unexpected control_set for #{name}: '#{rep[:control_set]}'"
        end
        sequence = rep[:sequence]
        human_bytes = sequence.filter do |ch|
          !ch.nil?
        end.map do |ch|
          if (ch >= 33) && (ch <= 126)
            ch.chr
          else
            "0o#{ch.ord.to_s(8)}"
          end
        end.join ' '
        human = "#{human_set} #{human_bytes}"

        specs_f.puts "\t\t\t// #{human}"
        specs_f.puts "\t\t\tvparser.Trigger{"
        specs_f.puts "\t\t\t\tSet:      vparser.#{go_set},"
        specs_f.puts "\t\t\t\tSequence: []byte{#{sequence.join ', '}},"
        specs_f.puts "\t\t\t},"
      end
      specs_f.puts "\t\t},"

      handler = if details[:implemented]
                  "do#{name}"
                else
                  'nil'
                end
      if details[:selections]
        specs_f.puts "\t\tSelections: map[int]string{"
        details[:selections].each do |n, text|
          text.gsub!('"', '\"')
          specs_f.puts "\t\t\t#{n}: \"#{text}\","

        end
        specs_f.puts "\t\t},"
      end
      specs_f.puts "\t\tUserData: #{handler},"
      specs_f.puts "\t},"

      name = name.gsub('-', '_')
      path = "#{output_dir}/do#{name}.go"

      user_code = nil
      if File.exist? path
        content = File.read path
        marker_rx = Regexp.new("^(.*)#{marker}\n(.*)$", Regexp::MULTILINE)
        m = marker_rx.match content
        raise "File #{path} does not contain '#{marker}'" unless m

        user_code = m[2]
      end

      if details[:implemented]
        File.open(path, 'w') do |f|
          f.puts 'package vterm'
          f.puts ''
          f.puts '/*'
          f.puts "  #{name}"
          f.puts "  #{go_summary}"
          f.puts ''
          f.puts "  #{go_description}"
          f.puts '*/'
          f.puts ''
          f.puts marker

          if user_code
            f.write user_code
          else
            f.puts 'import ('
            f.puts "\t\"github.com/perpen/vtx00/vparser\""
            f.puts "\t\"testing\""
            f.puts ')'
            f.puts ''
            f.puts "func do#{name}(spec *vparser.ControlSpec, params []int, term *Term) {"
            f.puts '}'
            f.puts ''
            f.puts "func test#{name}(t *testing.T) {"
            f.puts '/*'
            f.puts "\ttestImpl("
            f.puts "		\"#{name}\","
            f.puts "		\"#{name} test\","
            f.puts "\t\t[]int{},"
            f.puts "\t\ttestState{"
            f.puts "\t\t\tvisualScreen: `a b^c"
            f.puts "\t\t\t               d e f"
            f.puts "\t\t\t               g h i`,"
            f.puts "\t\t\tsettings: defaultSettings,"
            f.puts "\t\t},"
            f.puts "\t\ttestState{"
            f.puts "\t\t\tvisualScreen: `a b^c"
            f.puts "\t\t\t               d e f"
            f.puts "\t\t\t               g h i`,"
            f.puts "\t\t\tsettings: defaultSettings,"
            f.puts "\t\t},"
            f.puts "\t\tt,"
            f.puts "\t)"
            f.puts '*/'
            f.puts '}'
          end
        end
      end
    end
    specs_f.puts '}'
  end

  File.open(specs_path, 'a') do |specs_f|
    specs_f.puts ''
    specs_f.puts 'var allControlTests = map[string]func(*testing.T){'

    functions.each do |name, details|
      next unless details[:implemented]
      name = name.gsub('-', '_')
      specs_f.puts "\t\"#{name}\": test#{name},"
    end
    specs_f.puts '}'
  end
end

generate_controls File.dirname(__FILE__), ['reference/xterm.yml']
